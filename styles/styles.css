/* I import the fonts from google fonts */
@font-face {
    font-family: 'Archivo', sans-serif;
    font-family: 'Roboto', sans-serif;
    src: url('https://fonts.googleapis.com/css2?family=Archivo&family=Roboto&display=swap');
}

@font-face {
    font-family: 'Noto Emoji', sans-serif;
    src: url('https://fonts.googleapis.com/css2?family=Noto+Emoji&display=swap');
}

:root {
	/* This is all CSS I have deloped myself over time based on
	   The on the css design systems course at leveluptutorials.com

	   The typography is taken from typescale.com and the elevations
	   were origionally taken from materialUI but have been modified
	   by me to suit my purposes. 
   */

    /*Define colours as colours*/

	/* I actually designed this color palette myself             */
	/* for another project and I thought it would be a nice fit. */
    /* for a bookstore.                                          */

    --blue: #8FC1F3;
    --darkBlue: #122A40;
    --medDarkBlue: #0B4D76;
    --lightBlue: #A8CEF3;
    --lightGrey: #f5f5f5;
    --purple: #760B4D;
    --green: #4D760B;
    --grey: #646464;
    --darkGrey: #323232;
    --orange: #CD691A;
    --lightOrange: #F28E3F;
    --darkGreyBlue: #010F1C;
	--red: #ff0003;
	--darkRed: #b30002;
	--white: #fff;
	--offWhite: #cee1f2;

    /*define colour intentions*/

    --primary: var(--medDarkBlue);
    --danger: var(--red);
	--dangerHover: green;
    --background: var(--offWhite);
    --textColor: var(--darkGrey);
    --lineColor: var(--purple);
    --linkColor: var(--green);

    --cardBorder: var(--purple);
    --cardBg: var(--purple);
    --cardText: var(--lightOrange);

    --blockquoteBg: var(--lightBlue);
    --blockquoteText: var(--medDarkBlue);

    --buttonColor: var(--blue);
    --buttonTextColor: var(--darkBlue);
	--buttonCancelText: var(--lightGrey);

    --navTextColor: var(--medDarkBlue);
    --navColor: var(--lightBlue);

    --footerColor: var(--darkBlue);
    --footerText: var(--white);

    /* Styles */
	/* I create a simple line variable to keep lines cosnsitent */
	/* If I want a slightly different line style, then I can still use the line color */
	/* variable, or I can change the line color variable to keep the style and change color */
    --line: solid 1px var(--lineColor);

    /* Fonts */
    --headingFont: 'Archivo', sans-serif;
    --bodyFont: 'Roboto', sans-serif;
    --baseFontSize: 175%;
	/* I create variables from the type-scale.com css so I can use the variables to change text sizes */
	/* consistently */
    --h1: 3.052rem;
    --h2: 2.441rem;
    --h3: 1.953rem;
    --h4: 1.563rem;
    --h5: 1.25rem;
    --smallText: 0.8rem;

    /*Elevation*/
	/* I took these elevations from material ui and modified them */
    --level-1: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
    --level-2: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    --level-3: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    --shelf-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.1);
    --cardShadow: 0 2px 18px rgb(34 34 34 / 20%);
    --cardTransition: box-shadow 200ms;

    /* Positioning */
    --containerPadding: 2.5%;
    --headerHeight: 5rem;
    --borderRadius: 5px;
    --footerHeight: 9rem;
    --headerFooterHeight: calc(var(--headerHeight) + var(--footerHeight));
}

html {
    font-size: var(--baseFontSize);
    box-sizing: border-box;
}

*,
*::before,
*::after {
    box-sizing: inherit;
}

/*From type-scale.com*/
h1, h2, h3, h4, h5 {
    margin: 3rem 0 1.38rem;
    font-family: var(--headingFont);
    font-weight: 400;
    line-height: 1.3;
}

h1, h2 {
    border-bottom: var(--line);
}

h2, h3, h4, h5 {
    max-width: 75%;
}

h1 {
    margin-top: 0;
    font-size: var(--h1);
}

h2 {font-size: var(--h2);}

h3 {font-size: var(--h3);}

h4 {font-size: var(--h4);}

h5 {font-size: var(--h5);}

.h1 {
    margin-top: 0;
    font-size: var(--h1);
}

.h2 {font-size: var(--h2);}

.h3 {font-size: var(--h3);}

.h4 {font-size: var(--h4);}

.h5 {font-size: var(--h5);}

small, .text_small {font-size: var(--smallText);}

/*end type scale*/

/* Normally for a classless css style file like this I try to keep things roughly organized by */
/* where they would flow on a page, header, body, footer etc. After that I have utility classes */
/* and then media queries. Normally anything that is page specific would be in a seperate file */
/* but this project is small enough that I just kept everything together. */

body{
	background: var(--background);
}

.layout {
    padding: calc(1rem + var(--headerHeight)) var(--containerPadding);
    min-height: calc(100vh - var(--footerHeight));
    max-width: 1660px;
    margin: auto;
	padding-bottom: 1rem;
    background: var(--background);
}

/* I need seperate layout classes because of the way the parallax
   sections divide up the page */

.layout-mid {
    padding: 1rem var(--containerPadding);
    max-width: 1660px;
    background: var(--background);
    margin: auto;
	margin-bottom: 3rem;
}


/* Creates the shelf under the parallax effect above */

nav.nav {
    --headerBackground: var(--navColor);
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    background: var(--headerBackground);
    height: var(--headerHeight);
    box-shadow: var(--level-2);
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 var(--containerPadding);
    z-index: 10;
    padding: 2rem;
}

header nav li {
    list-style: none;
	display: inline;
}

.book-emoji {
	font-size: 1.5rem;
}

.logo-h1 a {
	font-size: var(--h5);
	margin: none;
	border: none;
	color: var(--bodyFontColor);
	line-height: var(--h5);
}

.logo-h1 {
	border: none;
}

header nav a {
    color: var(--navTextColor);
    text-decoration: none;
    font-size: var(--h5);
}

header nav li+li {
	margin-left: 0.5rem;
}

header nav a:hover {
	border-bottom: solid 1px var(--navTextColor);
}

header nav a.home-link {
    font-size: var(--h5);
	color: var(--bodyFontColor);
	line-height: var(--h5);
}

body {
	box-sizing: border-box;
    font-family: var(--bodyFont);
    font-weight: 400;
    line-height: 1.75;
    color: var(--textColor);
}

header nav a.home-link:hover {
	border: none;
}

.feature-books {
	margin-top: 3rem;
}


a {
    text-decoration: none;
}

p {
    margin-bottom: 1rem;
}


p a,
blockquote a {
    color: var(--linkColor);
    text-decoration: none;
    border-bottom: solid 2px var(--linkColor);
}

blockquote a {
    --linkColor: var(--purple);
}

blockquote {
    margin: 10px;
    max-width: 40rem;
    border-radius: 3px;
    padding: 2em;
}

blockquote.blockquote {
    background: var(--blockquoteBg);
    box-shadow: var(--level-3);
    color: var(--blockquoteText);
}

blockquote h3 {
	margin-top: 0;
}


aside.feature img {
	border-radius: 5px;
	max-height: 100%;
	display: none;
}

aside.feature {
	max-height: 35rem;
	align-items: center;
	justify-content: center;
}

div.feature {
	padding: 3rem 0 3rem 0;
}

article {
	max-height: 35rem;
}


article+article {
	max-height: 35rem;
	margin-top: 1rem;
}

hr {
    border: 0;
    border-top: var(--line);
}

footer {
    --footerTextColor: var(--footerText);
    color: var(--footerTextColor);
    background: var(--footerColor);
    padding: 2rem var(--containerPadding);
    text-align: center;
    height: var(--footerHeight);
}

footer ul {
	padding: 0;
}

footer a {
    text-decoration: none;
    color: var(--footerTextColor);
}
footer a + a {
    margin-left: 5px;
}

footer nav li {
    list-style: none;
	display: inline;
}

footer p {
    margin-bottom: none;
}

/*Form Css */

input, textarea {
    border: var(--line);
    border-radius: 4px;
    padding: 2px 5px;
	display: block;
}

input.radio {
	display: inline;
}

form {
	margin-bottom: 2rem;
}

button {
    appearance: none;
    color: var(--buttonTextColor);
    background-color: var(--buttonColor);
    border: none;
    margin: 2px;
    border-radius: 5px;
    padding: 5px 25px;
    box-shadow: var(--level-2);
    transition: 0.3s ease-in-out box-shadow;
}

button.primary:hover {
    box-shadow:var(--level-2);
    color: var(--white);
    background-color: var(--primary);
}

button.cancel {
    --buttonColor: var(--danger);
    --buttonTextColor: var(--buttonCancelText);
}

button.cancel:hover {
    box-shadow:var(--level-2);
	--buttonColor: var(--darkRed);
}

button.small {
    font-size: var(--smallText);
}

button.plain {
    padding: 5px;
    background: var(--cardBackground);
    box-shadow: none;
    margin: 0;
    display: block;
    color: var(--textColor);
}

button.plain:hover {
    box-shadow: none;
}

button[disabled] {
    opacity: 0.4;
    border: none;
    margin: 2px;
}

/* borrowed from https://www.w3schools.com/howto/howto_css_parallax.asp */
.parallax {
	background: url(../paper.jpg);
	min-height: 350px; 
	background-attachment: fixed;
	background-position: center;
	background-repeat: no-repeat;
	background-size: cover;
	display: none;
}
.parallax-mid {
	background: url(../paper.jpg);
	min-height: 200px;
	background-attachment: fixed;
	background-position: center;
	background-repeat: no-repeat;
	background-size: cover;
	display: none;
}

.shelf {
	width: 100%;
	height: 3rem;
    box-shadow: var(--shelf-shadow);
}

.bottom-shelf {
	margin-top: 3rem;
	margin-bottom: -1rem;
}

/* Card CSS */
/* I try to keep all of this together */

.inventory {
	/* margin for the card container in inventory */
	margin-top: 5rem;
}

.card-container {
    --gridCols: 2;
    display: grid;
    grid-template-columns: repeat(var(--gridCols), 1fr);
    gap: 5px;
}

.card {
	background: var(--cardBg);
    margin: 10px;
    border: 1px solid var(--cardBorder);
    border-radius: var(--borderRadius);
	width: 250px;
    box-shadow: var(--level-2);
	display: block;
	margin: auto;
	margin-bottom: 1rem;
	overflow: hidden;
}

.card a {
    color: var(--white);
}

.card div {
	max-height: 325px;
	overflow: hidden;
}

.card h5 {
	margin-top: 1rem;
	margin-bottom: 0;
    padding: 0 1rem 0 1rem;
    color: var(--cardText);
}

.card img {
	display: block;
	margin: auto;
	width: 100%;
}

.card header {
	display: none;
}

.card > *:first-child {
    margin-top: 0;
}

.card > *:last-child {
    margin-bottom: 0;
}

/* End of card css */

/* Basic grid ulitity classes. display none, changed in media query */
.aside-right {
    grid-template-columns: 67% 33%;
    grid-gap: 20px;
}

.aside-left {
    grid-template-columns: 33% 67%;
    grid-gap: 20px;
}

.profile-image {
	width: 100%;
	border-radius: 5px;
}

/* Basic flex ulitity classes. display none, changed in media query */

.grid {
    --gridCols: 2;
    /*display grid in media query*/
    display: block;
    grid-template-columns: repeat(var(--gridCols), 1fr);
    gap: 5px;
}

.flex {
    --justifyContent: space-between;
    display: block;
    justify-content: var(--justifyContent);
}

.flex-start {
    justify-content: start;
}

.flex-around {
    --justifyContent: space-around;
}

/* Media query to display grid, flex and increase font size */
/* and tweak some other stuff a bit. */
/* Often  I will do 2 media queries for large/medium/small but I didn't
 Feel like anything in this project really needed it.*/
@media (min-width: 1150px) {
    :root{
        --baseFontSize: 100%;
    }

    .grid {
        display: grid;
    }

	.flex {
		display: flex;
	}

	.cols-3 {
		--gridCols: 3;
	}
	
	.cols-4 {
		--gridCols: 4;
	}

	.parallax {
		display: block;
	}

	.parallax-mid {
		display: block;
	}

	.card header {
		display: block;
	}

	.card {
		min-height: 375px;
	}

	aside.feature img {
		display: block;
	}

	.image-wrap {
		float: right;
		width: 33%;
	}

	.layout.home-layout {
		padding: 0 var(--containerPadding);
		min-height: 40rem;
	}

	.feature-books {
		height: 30rem;
		margin-top: 3rem;
	}
}
